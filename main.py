{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM8544a8pNN7J82iXTkJolW"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","import os\n","import sys\n","\n","drive.mount('/content/drive')\n","sys.path.append('/content/drive/Shareddrives/CSS483 Financial Engineering/Algorithmic Trading on BTC USDT')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0x2xrhfOvK-s","executionInfo":{"status":"ok","timestamp":1733904281868,"user_tz":-420,"elapsed":23687,"user":{"displayName":"Akekonwit Keawdoung","userId":"00483146695450403987"}},"outputId":"fe6a7d1a-8b15-4b3b-97de-23d3fc5e78b2"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["% ls"],"metadata":{"id":"ZpsAiKENwSBM","executionInfo":{"status":"error","timestamp":1733904394476,"user_tz":-420,"elapsed":612,"user":{"displayName":"Akekonwit Keawdoung","userId":"00483146695450403987"}},"outputId":"603683d8-ba89-48da-d99c-84ddb028490a","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["UsageError: Line magic function `%` not found.\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":383},"id":"AK79vZzhvD8n","executionInfo":{"status":"error","timestamp":1733904320293,"user_tz":-420,"elapsed":866,"user":{"displayName":"Akekonwit Keawdoung","userId":"00483146695450403987"}},"outputId":"43515b95-5910-4cf3-bb03-21ad333ee7cb"},"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'Agent_1m'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-23eda8ce3995>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mAgent_1m\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mAgent_1m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mAgent_1h\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mAgent_1h\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mAgent_4h\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mAgent_4h\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mAgent_1d\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mAgent_1d\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mutils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfetch_historical_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcalculate_performance_metrics\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'Agent_1m'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}],"source":["from Agent_1m import Agent_1m\n","from Agent_1h import Agent_1h\n","from Agent_4h import Agent_4h\n","from Agent_1d import Agent_1d\n","from utils import fetch_historical_data, calculate_performance_metrics\n","\n","def backtest(agent, data):\n","    \"\"\"Backtest a trading agent.\"\"\"\n","    for timestamp, row in data.iterrows():\n","        price = row['close']  # Use the closing price for trades\n","        signal = agent.generate_signals(row)\n","        agent.trade(price, signal)\n","    return agent.get_portfolio_value(data['close'].iloc[-1])\n","\n","# Fetch data for different intervals\n","df_1m = fetch_historical_data('BTCUSDT', '1m')\n","df_1h = fetch_historical_data('BTCUSDT', '1h')\n","df_4h = fetch_historical_data('BTCUSDT', '4h')\n","df_1d = fetch_historical_data('BTCUSDT', '1d')\n","\n","# Initialize agents\n","agent_1m = Agent_1m()\n","agent_1h = Agent_1h()\n","agent_4h = Agent_4h()\n","agent_1d = Agent_1d()\n","\n","# Backtest each agent\n","portfolio_value_1m = backtest(agent_1m, df_1m)\n","portfolio_value_1h = backtest(agent_1h, df_1h)\n","portfolio_value_4h = backtest(agent_4h, df_4h)\n","portfolio_value_1d = backtest(agent_1d, df_1d)\n","\n","# Print results\n","print(f\"Portfolio Value for 1m Interval: {portfolio_value_1m}\")\n","print(f\"Portfolio Value for 1h Interval: {portfolio_value_1h}\")\n","print(f\"Portfolio Value for 4h Interval: {portfolio_value_4h}\")\n","print(f\"Portfolio Value for 1d Interval: {portfolio_value_1d}\")"]}]}