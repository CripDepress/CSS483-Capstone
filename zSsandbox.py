{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1UeazJIiJzZOaE9Apaz843n_jn8K2rLmb","authorship_tag":"ABX9TyPHJen1fCyuTah/rGWA6elR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","import os\n","import sys\n","\n","drive.mount('/content/drive')\n","sys.path.append('/content/drive/Shareddrives/CSS483 Financial Engineering/Algorithmic Trading on BTC USDT')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IVbTyI2MvQ7M","executionInfo":{"status":"ok","timestamp":1733904411161,"user_tz":-420,"elapsed":2422,"user":{"displayName":"Akekonwit Keawdoung","userId":"00483146695450403987"}},"outputId":"5354c996-6998-4c27-f188-93d1003b20d6"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["from utils import TradingAgent"],"metadata":{"id":"_cgksZ2JwbVR","executionInfo":{"status":"error","timestamp":1733904416045,"user_tz":-420,"elapsed":352,"user":{"displayName":"Akekonwit Keawdoung","userId":"00483146695450403987"}},"outputId":"5d56c7b1-9f49-4918-8d5d-1429527a4454","colab":{"base_uri":"https://localhost:8080/","height":228}},"execution_count":6,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'null' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-cbd5e36b52ce>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mutils\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mTradingAgent\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/content/drive/Shareddrives/CSS483 Financial Engineering/Algorithmic Trading on BTC USDT/utils.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m{\u001b[0m\u001b[0;34m\"nbformat\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"nbformat_minor\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"metadata\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m\"colab\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m\"provenance\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"authorship_tag\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"ABX9TyOrh0yuWg7K06YeWT9zBh9W\"\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"kernelspec\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m\"name\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"python3\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"display_name\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"Python 3\"\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"language_info\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m\"name\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"python\"\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"cells\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m\"cell_type\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"code\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"execution_count\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mnull\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"metadata\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m\"id\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\"pKPvhoR_tEfd\"\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"outputs\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"source\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"import pandas as pd\\n\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"import requests\\n\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"\\n\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"class TradingAgent:\\n\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"    \\\"\\\"\\\"Base class for trading agents.\\\"\\\"\\\"\\n\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"    def __init__(self, initial_cash=100000):\\n\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"        self.initial_cash = ini...\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'null' is not defined"]}]},{"cell_type":"markdown","source":["# 1. Data Collection and Preprocessing"],"metadata":{"id":"Erwrd0ZErgaI"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"r6Ftiug4rMVJ"},"outputs":[],"source":["import requests\n","import pandas as pd\n","import time\n","\n","def fetch_historical_data(symbol, interval, limit=1000):\n","    url = f'https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}'\n","    response = requests.get(url)\n","    data = response.json()\n","    df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'close_time', 'quote_asset_volume', 'number_of_trades', 'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'])\n","    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')\n","    df.set_index('timestamp', inplace=True)\n","    df = df[['open', 'high', 'low', 'close', 'volume']].astype(float)\n","    return df\n","\n","# Fetch data for different intervals\n","df_1m = fetch_historical_data('BTCUSDT', '1m')\n","df_1h = fetch_historical_data('BTCUSDT', '1h')\n","df_1d = fetch_historical_data('BTCUSDT', '1d')"]},{"cell_type":"markdown","source":["# 4. Backtesting Framework"],"metadata":{"id":"_ajvhyWkr2V5"}},{"cell_type":"code","source":["def backtest(agent, data):\n","    \"\"\"Backtest a trading agent.\"\"\"\n","    for timestamp, row in data.iterrows():\n","        price = row['close']  # Use the closing price for trades\n","        signal = agent.generate_signals(row)\n","        agent.trade(price, signal)\n","    return agent.get_portfolio_value(data['close'].iloc[-1])\n","\n","# Initialize dummy agents\n","agent_1m = DummyAgent()\n","agent_1h = DummyAgent()\n","agent_1d = DummyAgent()\n","\n","# Backtest each agent\n","portfolio_value_1m = backtest(agent_1m, df_1m)\n","portfolio_value_1h = backtest(agent_1h, df_1h)\n","portfolio_value_1d = backtest(agent_1d, df_1d)\n","\n","# Print results\n","print(f\"Portfolio Value for 1m Interval: {portfolio_value_1m}\")\n","print(f\"Portfolio Value for 1h Interval: {portfolio_value_1h}\")\n","print(f\"Portfolio Value for 1d Interval: {portfolio_value_1d}\")"],"metadata":{"id":"1zbJv0jtr43O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 5. Performance Evaluation and Analysis"],"metadata":{"id":"n3ZWTeEar6o5"}},{"cell_type":"code","source":["def calculate_performance_metrics(initial_cash, final_value):\n","    \"\"\"Calculate performance metrics.\"\"\"\n","    total_return = (final_value - initial_cash) / initial_cash\n","    return {\"Total Return\": total_return}\n","\n","# Evaluate performance\n","performance_1m = calculate_performance_metrics(agent_1m.initial_cash, portfolio_value_1m)\n","performance_1h = calculate_performance_metrics(agent_1h.initial_cash, portfolio_value_1h)\n","performance_1d = calculate_performance_metrics(agent_1d.initial_cash, portfolio_value_1d)\n","\n","# Print performance metrics\n","print(\"Performance for 1m Interval:\", performance_1m)\n","print(\"Performance for 1h Interval:\", performance_1h)\n","print(\"Performance for 1d Interval:\", performance_1d)"],"metadata":{"id":"LEEF3ahir9Qn"},"execution_count":null,"outputs":[]}]}